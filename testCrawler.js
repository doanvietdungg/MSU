import puppeteer from "puppeteer";
import fs from "fs";

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

(async () => {
  let loopCounter = 0;
  const LOOP_DELAY = 60000; // 1 ph√∫t delay gi·ªØa c√°c v√≤ng l·∫∑p

  console.log(`üöÄ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p v√¥ h·∫°n v·ªõi delay ${LOOP_DELAY / 1000}s gi·ªØa c√°c v√≤ng...`);

  while (true) {
    loopCounter++;
    console.log(`\nüîÑ ===== V√íNG L·∫∂P ${loopCounter} =====`);
    
    const browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
    });

    const page = await browser.newPage();
    let allCharacters = [];

  // === B·∫ÆT LIST T·ª™ API EXPLORE ===
  const onResponseList = async (response) => {
    const url = response.url();
    if (
      url === "https://msu.io/marketplace/api/marketplace/explore/characters"
    ) {
      try {
        const data = await response.json();
        const items = data?.characters || data?.data?.items || [];
        console.log(`üìÑ API list tr·∫£ v·ªÅ ${items.length} nh√¢n v·∫≠t`);
        allCharacters = items;
        fs.writeFileSync("characters.json", JSON.stringify(items, null, 2));
        console.log("üíæ ƒê√£ l∆∞u danh s√°ch v√†o characters.json");

        page.off("response", onResponseList);
      } catch (err) {
        console.log("‚ùå Kh√¥ng parse ƒë∆∞·ª£c JSON khi l·∫•y list, ngh·ªâ 5s...");
        await delay(5000);
      }
    }
  };

  page.on("response", onResponseList);

  await page.goto("https://msu.io/marketplace/character", {
    waitUntil: "networkidle2",
  });
  await delay(5000);

  // Crawl 10 nh√¢n v·∫≠t ƒë·∫ßu ti√™n, nh∆∞ng s·∫Ω l·∫∑p l·∫°i 10 l·∫ßn
  const charactersToCrawl = allCharacters.slice(0, 10);
  const TOTAL_CYCLES = 10; // Crawl 10 l·∫ßn
  const CHARACTERS_PER_CYCLE = charactersToCrawl.length;

  console.log(
    `üëâ B·∫Øt ƒë·∫ßu crawl ${TOTAL_CYCLES} chu k·ª≥, m·ªói chu k·ª≥ ${CHARACTERS_PER_CYCLE} nh√¢n v·∫≠t...`
  );

  const filename = "characters_detailed.json";
  let existing = [];
  if (fs.existsSync(filename)) {
    existing = JSON.parse(fs.readFileSync(filename));
  }

  // === Load checkpoint index ===
  let checkpoint = 0;
  if (fs.existsSync("checkpoint.json")) {
    checkpoint = JSON.parse(fs.readFileSync("checkpoint.json"));
    console.log(`‚è© Ti·∫øp t·ª•c t·ª´ index ${checkpoint}`);
  }

  // Reset checkpoint n·∫øu v∆∞·ª£t qu√° t·ªïng s·ªë nh√¢n v·∫≠t c·∫ßn crawl
  const totalCharactersToProcess = TOTAL_CYCLES * CHARACTERS_PER_CYCLE;
  if (checkpoint >= totalCharactersToProcess) {
    checkpoint = 0;
    console.log(`üîÑ Checkpoint v∆∞·ª£t qu√° gi·ªõi h·∫°n, reset v·ªÅ 0`);
  }

  // T√≠nh to√°n chu k·ª≥ hi·ªán t·∫°i
  const currentCycle = Math.floor(checkpoint / CHARACTERS_PER_CYCLE) + 1;
  const currentCycleProgress = checkpoint % CHARACTERS_PER_CYCLE;

  console.log(`üîÑ Chu k·ª≥ hi·ªán t·∫°i: ${currentCycle}/${TOTAL_CYCLES}`);
  console.log(`üìä Ti·∫øn ƒë·ªô trong chu k·ª≥: ${currentCycleProgress}/${CHARACTERS_PER_CYCLE}`);
  console.log(`üéØ S·∫Ω crawl t·ª´ index ${checkpoint} ƒë·∫øn ${totalCharactersToProcess - 1} (${totalCharactersToProcess - checkpoint} nh√¢n v·∫≠t)`);

  // === File t·ªïng h·ª£p nh√¢n v·∫≠t + v·∫≠t ph·∫©m ===
  const summaryFile = "character_item_summary.json";
  let summaryData = [];
  if (fs.existsSync(summaryFile)) {
    try {
      const raw = fs.readFileSync(summaryFile, "utf8").trim();
      summaryData = raw ? JSON.parse(raw) : [];
    } catch {
      console.log("‚ö†Ô∏è File summary b·ªã l·ªói, t·∫°o m·ªõi.");
      summaryData = [];
    }
  }

  // === T·ªêI ∆ØU: CH·∫†Y SONG SONG ===
  const CONCURRENT_LIMIT = 1; // Gi·∫£m xu·ªëng 1 ƒë·ªÉ tr√°nh 429
  const BATCH_SIZE = 1; // Gi·∫£m batch size
  const REQUEST_DELAY = 5000; // 5 gi√¢y delay gi·ªØa c√°c request

  const crawlCharacter = async (char, index) => {
    const tokenId = char.tokenId;
    const detailUrl = `https://msu.io/marketplace/character/${tokenId}`;
    const expectUrl = `https://msu.io/marketplace/api/marketplace/characters/${tokenId}`;

    const globalIndex = index + 1;
    const currentCycle = Math.floor(index / CHARACTERS_PER_CYCLE) + 1;
    const cycleProgress = (index % CHARACTERS_PER_CYCLE) + 1;
    console.log(`üîé [${globalIndex}/${totalCharactersToProcess}] Chu k·ª≥ ${currentCycle}/${TOTAL_CYCLES} - Nh√¢n v·∫≠t ${cycleProgress}/${CHARACTERS_PER_CYCLE} - ƒêang m·ªü ${detailUrl}`);
    let detailJson = null;
    let retryCount = 0;
    const maxRetries = 5;

    while (!detailJson && retryCount < maxRetries) {
      const detailPage = await browser.newPage();

      try {
        await detailPage.goto(detailUrl, {
          timeout: 60000,
          waitUntil: "domcontentloaded",
        });

        const response = await detailPage.waitForResponse(
          (res) => res.url() === expectUrl
        );

        if (response.status() === 429) {
          retryCount++;
          const backoffDelay = Math.min(600000 * Math.pow(2, retryCount - 1), 1800000); // Max 30 ph√∫t
          console.log(`‚è≥ 429 cho ${tokenId} (l·∫ßn ${retryCount}), ngh·ªâ ${backoffDelay / 60000} ph√∫t...`);
          await delay(backoffDelay);
        } else {
          try {
            detailJson = await response.json();
            console.log(`‚úÖ L·∫•y th√†nh c√¥ng detail cho ${tokenId}`);
          } catch (err) {
            retryCount++;
            const backoffDelay = Math.min(600000 * Math.pow(2, retryCount - 1), 1800000);
            console.log(
              `‚ùå Parse JSON l·ªói cho ${tokenId} (l·∫ßn ${retryCount}), ngh·ªâ ${backoffDelay / 60000} ph√∫t...`
            );
            await delay(backoffDelay);
          }
        }
      } catch (err) {
        retryCount++;
        const backoffDelay = Math.min(600000 * Math.pow(2, retryCount - 1), 1800000);
        console.log(`‚ùå L·ªói m·ªü trang ${detailUrl} (l·∫ßn ${retryCount}):`, err.message);
        console.log(`‚è≥ Ngh·ªâ ${backoffDelay / 60000} ph√∫t r·ªìi th·ª≠ l·∫°i...`);
        await delay(backoffDelay);
      }

      await detailPage.close();
    }

    if (!detailJson) {
      console.log(`‚ùå Kh√¥ng th·ªÉ l·∫•y detail cho ${tokenId} sau ${maxRetries} l·∫ßn th·ª≠`);
      return null;
    }

    // === CRAWL V·∫¨T PH·∫®M NH√ÇN V·∫¨T ===
    const summaryEntry = {
      characterTokenId: tokenId,
      characterLink: detailUrl,
      characterPriceWei: "0",
      characterPriceEth: 0,
      items: [],
    };

    try {
      // L·∫•y gi√° nh√¢n v·∫≠t (∆∞u ti√™n t·ª´ API ch√≠nh n·∫øu c√≥)
      const characterPriceWeiMain =
        detailJson?.character?.salesInfo?.priceWei ||
        detailJson?.salesInfo?.priceWei ||
        detailJson?.data?.salesInfo?.priceWei ||
        null;
      const characterPriceWei = characterPriceWeiMain || "0";
      const characterPriceEth = Number(characterPriceWei) / 1e18;
      summaryEntry.characterPriceWei = characterPriceWei;
      summaryEntry.characterPriceEth = characterPriceEth;

      const equip = detailJson?.character?.wearing?.equip || {};
      const equipTokens = Object.values(equip)
        .filter((v) => v && v.tokenId)
        .map((v) => v.tokenId);

      console.log(
        `üß© Nh√¢n v·∫≠t ${tokenId} c√≥ ${equipTokens.length} v·∫≠t ph·∫©m c·∫ßn crawl`
      );

      const itemDetails = [];
      const pricedItems = [];
      for (const itemToken of equipTokens) {
        const itemUrl = `https://msu.io/marketplace/nft/${itemToken}`;
        const itemApiUrl = `https://msu.io/marketplace/api/marketplace/items/${itemToken}`;
        const itemApiUrlTradeHistory = `https://msu.io/marketplace/api/marketplace/items/${itemToken}/trade-history`

        let itemJsonMain = null;
        let itemJsonTradeHistory = null;
        let retry = 0;

        while (!itemJsonMain && !itemJsonTradeHistory && retry < 3) {
          const itemPage = await browser.newPage();
          try {
            await itemPage.goto(itemUrl, {
              timeout: 60000,
              waitUntil: "domcontentloaded",
            });

            // Ch·ªù c·∫£ hai API song song (API ch√≠nh + trade history)
            const [mainRes, historyRes] = await Promise.allSettled([
              itemPage.waitForResponse((res) => res.url() === itemApiUrl, { timeout: 20000 }),
              itemPage.waitForResponse((res) => res.url() === itemApiUrlTradeHistory, { timeout: 20000 }),
            ]);

            let hit429 = false;
            let mainData = null;
            let historyData = null;

            if (mainRes.status === 'fulfilled') {
              const res = mainRes.value;
              if (res.status() === 429) {
                hit429 = true;
              } else {
                try {
                  mainData = await res.json();
                  console.log(`‚úÖ L·∫•y item ${itemToken} t·ª´ API ch√≠nh`);
                } catch {}
              }
            }

            if (historyRes.status === 'fulfilled') {
              const res = historyRes.value;
              if (res.status() === 429) {
                hit429 = true;
              } else {
                try {
                  historyData = await res.json();
                  console.log(`‚úÖ L·∫•y item ${itemToken} t·ª´ trade history API`);
                } catch {}
              }
            }

            if (hit429) {
              console.log(`‚è≥ 429 khi l·∫•y item ${itemToken}, ngh·ªâ 10 ph√∫t...`);
              await delay(600000); // TƒÉng l√™n 10 ph√∫t
            }

            // G√°n d·ªØ li·ªáu ƒë·ªÉ d√πng ti·∫øp
            itemJsonMain = mainData;
            itemJsonTradeHistory = historyData;
          } catch (err) {
            retry++;
            console.log(
              `‚ö†Ô∏è L·ªói item ${itemToken}: ${err.message} ‚Üí th·ª≠ l·∫°i (${retry}/3)`
            );
            await delay(30000); // TƒÉng delay l√™n 30 gi√¢y
          }
          await itemPage.close();
        }

        if (itemJsonMain || itemJsonTradeHistory) {
          // T√≠nh gi√°: ∆∞u ti√™n API ch√≠nh, fallback sang trade history
          const priceFromMainWei = itemJsonMain?.salesInfo?.priceWei || null;
          const priceFromHistoryWei = itemJsonTradeHistory?.histories?.[0]?.tradeInfo?.priceWei || null;
          const priceWei = priceFromMainWei || priceFromHistoryWei || "0";
          if (priceFromMainWei) {
            console.log(`üí∞ L·∫•y gi√° t·ª´ salesInfo: ${priceFromMainWei}`);
          } else if (priceFromHistoryWei) {
            console.log(`üí∞ L·∫•y gi√° t·ª´ trade history: ${priceFromHistoryWei}`);
          }

          const priceEth = Number(priceWei) / 1e18;

          summaryEntry.items.push({
            itemTokenId: itemToken,
            itemLink: itemUrl,
            priceWei,
            priceEth,
          });

          if (priceEth > 0) {
            pricedItems.push({ itemToken, itemUrl, priceEth });
          }

          itemDetails.push(itemJsonMain || itemJsonTradeHistory);
        } else {
          console.log(`‚ùå B·ªè qua item ${itemToken} sau 3 l·∫ßn l·ªói`);
        }
      }

      // Send a single consolidated Telegram message per character
      if (pricedItems.length > 0 && summaryEntry.characterPriceEth <= 1000000) {
        const itemsLines = pricedItems
          .map((it) => `‚Ä¢ [${it.itemToken}](${it.itemUrl}) ‚Äî ${it.priceEth} ETH`)
          .join("\n");
        const msg = `üí∞ *T√¨m th·∫•y v·∫≠t ph·∫©m c√≥ gi√°!*\nüë§ Nh√¢n v·∫≠t: [${tokenId}](${detailUrl})\nüíµ Gi√° nh√¢n v·∫≠t: ${summaryEntry.characterPriceEth} ETH\n\n${itemsLines}`;
        sendTelegramMessage(msg);
      }

      return {
        detailJson,
        summaryEntry,
        itemDetails,
        tokenId,
        index
      };
    } catch (err) {
      console.log(
        `‚ùå L·ªói khi x·ª≠ l√Ω v·∫≠t ph·∫©m c·ªßa nh√¢n v·∫≠t ${tokenId}: ${err.message}`
      );
      return {
        detailJson,
        summaryEntry,
        itemDetails: [],
        tokenId,
        index
      };
    }
  };

  // === X·ª¨ L√ù THEO BATCH ===

  for (let batchStart = checkpoint; batchStart < totalCharactersToProcess; batchStart += BATCH_SIZE) {
    const batchEnd = Math.min(batchStart + BATCH_SIZE, totalCharactersToProcess);

    // T√≠nh to√°n chu k·ª≥ v√† index trong chu k·ª≥
    const currentBatchCycle = Math.floor(batchStart / CHARACTERS_PER_CYCLE) + 1;
    const startIndexInCycle = batchStart % CHARACTERS_PER_CYCLE;
    const endIndexInCycle = Math.min((batchEnd - 1) % CHARACTERS_PER_CYCLE + 1, CHARACTERS_PER_CYCLE);

    const batch = charactersToCrawl.slice(startIndexInCycle, endIndexInCycle);

    console.log(`üöÄ Chu k·ª≥ ${currentBatchCycle}/${TOTAL_CYCLES} - X·ª≠ l√Ω batch ${batchStart + 1}-${batchEnd} (${batch.length} nh√¢n v·∫≠t)`);

    // Ch·∫°y tu·∫ßn t·ª± ƒë·ªÉ tr√°nh 429 (v√¨ CONCURRENT_LIMIT = 1)
    const results = [];
    for (let i = 0; i < batch.length; i++) {
      const char = batch[i];
      const index = batchStart + i;

      console.log(`‚è≥ Delay ${REQUEST_DELAY / 1000}s tr∆∞·ªõc khi crawl nh√¢n v·∫≠t ${index + 1}...`);
      await delay(REQUEST_DELAY);

      const result = await crawlCharacter(char, index);
      if (result) {
        results.push({ status: 'fulfilled', value: result });
      } else {
        results.push({ status: 'rejected', reason: `Failed to crawl character ${char.tokenId}` });
      }

      // Delay th√™m sau m·ªói nh√¢n v·∫≠t
      if (i < batch.length - 1) {
        console.log(`‚è≥ Delay th√™m 3s gi·ªØa c√°c nh√¢n v·∫≠t...`);
        await delay(3000);
      }
    }

    // === L∆ØU K·∫æT QU·∫¢ BATCH ===
    for (const result of results) {
      if (result.status === 'fulfilled' && result.value) {
        const { detailJson, summaryEntry, itemDetails, tokenId, index } = result.value;

        // ‚úÖ L∆∞u chi ti·∫øt nh√¢n v·∫≠t
        existing.push(detailJson);
        console.log(`‚úÖ ƒê√£ l∆∞u detail cho tokenId ${tokenId}`);

        // ‚úÖ L∆∞u file chi ti·∫øt item ri√™ng
        if (itemDetails.length > 0) {
          const itemsFile = "items_detailed.json";
          let existingItems = [];
          if (fs.existsSync(itemsFile)) {
            try {
              const raw = fs.readFileSync(itemsFile, "utf8").trim();
              existingItems = raw ? JSON.parse(raw) : [];
            } catch {
              console.log("‚ö†Ô∏è File items_detailed.json b·ªã l·ªói, t·∫°o m·ªõi.");
              existingItems = [];
            }
          }

          existingItems.push(...itemDetails);
          fs.writeFileSync(itemsFile, JSON.stringify(existingItems, null, 2));
          console.log(
            `üíæ ƒê√£ l∆∞u ${itemDetails.length} v·∫≠t ph·∫©m cho nh√¢n v·∫≠t ${tokenId}`
          );
        }

        // ‚úÖ L∆∞u summary
        summaryData.push(summaryEntry);
        console.log(`üì¶ ƒê√£ c·∫≠p nh·∫≠t summary cho nh√¢n v·∫≠t ${tokenId}`);
      } else if (result.status === 'rejected') {
        console.log(`‚ùå L·ªói crawl nh√¢n v·∫≠t: ${result.reason}`);
      }
    }

    // ‚úÖ L∆∞u checkpoint v√† files sau m·ªói batch
    fs.writeFileSync(filename, JSON.stringify(existing, null, 2));
    fs.writeFileSync(summaryFile, JSON.stringify(summaryData, null, 2));

    // C·∫≠p nh·∫≠t checkpoint
    fs.writeFileSync("checkpoint.json", JSON.stringify(batchEnd));

    console.log(`‚úÖ Ho√†n th√†nh batch ${batchStart + 1}-${batchEnd}`);

    // Delay gi·ªØa c√°c batch l·ªõn
    if (batchEnd < totalCharactersToProcess) {
      console.log(`‚è≥ Delay 5s gi·ªØa c√°c batch...`);
      await delay(5000); // TƒÉng delay gi·ªØa batch l√™n 10 gi√¢y
    }
  }

    console.log(`üéâ Ho√†n th√†nh v√≤ng l·∫∑p ${loopCounter}!`);
    console.log(`üìä ƒê√£ crawl ${TOTAL_CYCLES} chu k·ª≥ (${totalCharactersToProcess} nh√¢n v·∫≠t)`);
    
    await browser.close();
    
    console.log(`‚è≥ Ch·ªù ${LOOP_DELAY / 1000}s tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ti·∫øp theo...`);
    await delay(LOOP_DELAY);
  }
})();

const TELEGRAM_BOT_TOKEN = "8069462425:AAF_U3Yo-plaL7KZVeQmNAfxHxhFk3UQS0k"; // üîë thay b·∫±ng token bot
const TELEGRAM_CHAT_ID = "-4938863590"; // üí¨ id chat ho·∫∑c group

async function sendTelegramMessage(text) {
  const fetch = (await import("node-fetch")).default;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  try {
    await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text,
        parse_mode: "Markdown",
      }),
    });
  } catch (err) {
    console.log("‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c Telegram:", err.message);
  }
}
import puppeteer from "puppeteer";
import fs from "fs";

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

(async () => {
  let loopCounter = 0;
  const LOOP_DELAY = 60000; // 1 ph√∫t delay gi·ªØa c√°c v√≤ng l·∫∑p

  console.log(`üöÄ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p v√¥ h·∫°n v·ªõi delay ${LOOP_DELAY / 1000}s gi·ªØa c√°c v√≤ng...`);

  while (true) {
    loopCounter++;
    console.log(`\nüîÑ ===== V√íNG L·∫∂P ${loopCounter} =====`);
    
    const browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
    });

    const page = await browser.newPage();
    let allCharacters = [];

    // === B·∫ÆT LIST T·ª™ API EXPLORE ===
    const onResponseList = async (response) => {
      const url = response.url();
      if (
        url === "https://msu.io/marketplace/api/marketplace/explore/characters"
      ) {
        try {
          const data = await response.json();
          const items = data?.characters || data?.data?.items || [];
          console.log(`üìÑ API list tr·∫£ v·ªÅ ${items.length} nh√¢n v·∫≠t`);
          allCharacters = items;

          page.off("response", onResponseList);
        } catch (err) {
          console.log("‚ùå Kh√¥ng parse ƒë∆∞·ª£c JSON khi l·∫•y list, ngh·ªâ 5s...");
          await delay(5000);
        }
      }
    };

    page.on("response", onResponseList);

    await page.goto("https://msu.io/marketplace/character", {
      waitUntil: "networkidle2",
    });
    await delay(5000);

    // Ch·ªâ crawl 20 nh√¢n v·∫≠t ƒë·∫ßu ti√™n
    const charactersToCrawl = allCharacters.slice(0, 20);
    console.log(`üëâ B·∫Øt ƒë·∫ßu crawl ${charactersToCrawl.length} nh√¢n v·∫≠t ƒë·∫ßu ti√™n...`);

    // Delay gi·ªØa c√°c request
    const REQUEST_DELAY = 5000; // 5 gi√¢y delay gi·ªØa c√°c request

  const crawlCharacter = async (char, index) => {
    const tokenId = char.tokenId;
    const detailUrl = `https://msu.io/marketplace/character/${tokenId}`;
    const expectUrl = `https://msu.io/marketplace/api/marketplace/characters/${tokenId}`;

    console.log(`üîé [${index + 1}/${charactersToCrawl.length}] ƒêang m·ªü ${detailUrl}`);
    let detailJson = null;
    let retryCount = 0;
    const maxRetries = 5;

    while (!detailJson && retryCount < maxRetries) {
      const detailPage = await browser.newPage();

      try {
        await detailPage.goto(detailUrl, {
          timeout: 60000,
          waitUntil: "domcontentloaded",
        });

        const response = await detailPage.waitForResponse(
          (res) => res.url() === expectUrl
        );

        if (response.status() === 429) {
          retryCount++;
          const backoffDelay = Math.min(600000 * Math.pow(2, retryCount - 1), 1800000); // Max 30 ph√∫t
          console.log(`‚è≥ 429 cho ${tokenId} (l·∫ßn ${retryCount}), ngh·ªâ ${backoffDelay / 60000} ph√∫t...`);
          await delay(backoffDelay);
        } else {
          try {
            detailJson = await response.json();
            console.log(`‚úÖ L·∫•y th√†nh c√¥ng detail cho ${tokenId}`);
          } catch (err) {
            retryCount++;
            const backoffDelay = Math.min(600000 * Math.pow(2, retryCount - 1), 1800000);
            console.log(
              `‚ùå Parse JSON l·ªói cho ${tokenId} (l·∫ßn ${retryCount}), ngh·ªâ ${backoffDelay / 60000} ph√∫t...`
            );
            await delay(backoffDelay);
          }
        }
      } catch (err) {
        retryCount++;
        const backoffDelay = Math.min(600000 * Math.pow(2, retryCount - 1), 1800000);
        console.log(`‚ùå L·ªói m·ªü trang ${detailUrl} (l·∫ßn ${retryCount}):`, err.message);
        console.log(`‚è≥ Ngh·ªâ ${backoffDelay / 60000} ph√∫t r·ªìi th·ª≠ l·∫°i...`);
        await delay(backoffDelay);
      }

      await detailPage.close();
    }

    if (!detailJson) {
      console.log(`‚ùå Kh√¥ng th·ªÉ l·∫•y detail cho ${tokenId} sau ${maxRetries} l·∫ßn th·ª≠`);
      return null;
    }

    // === CRAWL V·∫¨T PH·∫®M NH√ÇN V·∫¨T ===
    const summaryEntry = {
      characterTokenId: tokenId,
      characterLink: detailUrl,
      characterPriceWei: "0",
      characterPriceNeso: 0,
      items: [],
    };

    try {
      // L·∫•y gi√° nh√¢n v·∫≠t (∆∞u ti√™n t·ª´ API ch√≠nh n·∫øu c√≥)
      const characterPriceWeiMain =
        detailJson?.character?.salesInfo?.priceWei ||
        detailJson?.salesInfo?.priceWei ||
        detailJson?.data?.salesInfo?.priceWei ||
        null;
      const characterPriceWei = characterPriceWeiMain || "0";
      const characterPriceNeso = Number(characterPriceWei) / 1e18;
      summaryEntry.characterPriceWei = characterPriceWei;
      summaryEntry.characterPriceNeso = characterPriceNeso;

      console.log(`üí∞ Gi√° nh√¢n v·∫≠t ${tokenId}: ${characterPriceNeso} Neso (${characterPriceWei} Wei)`);

      // Check gi√° nh√¢n v·∫≠t <= 1000000 Neso tr∆∞·ªõc khi crawl v·∫≠t ph·∫©m
      if (characterPriceNeso > 1000000) {
        console.log(`‚è≠Ô∏è B·ªè qua nh√¢n v·∫≠t ${tokenId} v√¨ gi√° ${characterPriceNeso} Neso > 1000000 Neso`);
        return {
          detailJson,
          summaryEntry,
          itemDetails: [],
          tokenId,
          index
        };
      }

      const equip = detailJson?.character?.wearing?.equip || {};
      const equipTokens = Object.values(equip)
        .filter((v) => v && v.tokenId)
        .map((v) => v.tokenId);

      console.log(
        `üß© Nh√¢n v·∫≠t ${tokenId} c√≥ ${equipTokens.length} v·∫≠t ph·∫©m c·∫ßn crawl`
      );

      const itemDetails = [];
      const pricedItems = [];
      for (const itemToken of equipTokens) {
        const itemUrl = `https://msu.io/marketplace/nft/${itemToken}`;
        const itemApiUrl = `https://msu.io/marketplace/api/marketplace/items/${itemToken}`;
        const itemApiUrlTradeHistory = `https://msu.io/marketplace/api/marketplace/items/${itemToken}/trade-history`

        let itemJsonMain = null;
        let itemJsonTradeHistory = null;
        let retry = 0;

        while (!itemJsonMain && !itemJsonTradeHistory && retry < 3) {
          const itemPage = await browser.newPage();
          try {
            await itemPage.goto(itemUrl, {
              timeout: 60000,
              waitUntil: "domcontentloaded",
            });

            // Ch·ªù c·∫£ hai API song song (API ch√≠nh + trade history)
            const [mainRes, historyRes] = await Promise.allSettled([
              itemPage.waitForResponse((res) => res.url() === itemApiUrl, { timeout: 20000 }),
              itemPage.waitForResponse((res) => res.url() === itemApiUrlTradeHistory, { timeout: 20000 }),
            ]);

            let hit429 = false;
            let mainData = null;
            let historyData = null;

            if (mainRes.status === 'fulfilled') {
              const res = mainRes.value;
              if (res.status() === 429) {
                hit429 = true;
              } else {
                try {
                  mainData = await res.json();
                  console.log(`‚úÖ L·∫•y item ${itemToken} t·ª´ API ch√≠nh`);
                } catch {}
              }
            }

            if (historyRes.status === 'fulfilled') {
              const res = historyRes.value;
              if (res.status() === 429) {
                hit429 = true;
              } else {
                try {
                  historyData = await res.json();
                  console.log(`‚úÖ L·∫•y item ${itemToken} t·ª´ trade history API`);
                } catch {}
              }
            }

            if (hit429) {
              console.log(`‚è≥ 429 khi l·∫•y item ${itemToken}, ngh·ªâ 10 ph√∫t...`);
              await delay(600000); // TƒÉng l√™n 10 ph√∫t
            }

            // G√°n d·ªØ li·ªáu ƒë·ªÉ d√πng ti·∫øp
            itemJsonMain = mainData;
            itemJsonTradeHistory = historyData;
          } catch (err) {
            retry++;
            console.log(
              `‚ö†Ô∏è L·ªói item ${itemToken}: ${err.message} ‚Üí th·ª≠ l·∫°i (${retry}/3)`
            );
            await delay(30000); // TƒÉng delay l√™n 30 gi√¢y
          }
          await itemPage.close();
        }

        if (itemJsonMain || itemJsonTradeHistory) {
          // T√≠nh gi√°: ∆∞u ti√™n API ch√≠nh, fallback sang trade history
          const priceFromMainWei = itemJsonMain?.salesInfo?.priceWei || null;
          const priceFromHistoryWei = itemJsonTradeHistory?.histories?.[0]?.tradeInfo?.priceWei || null;
          const priceWei = priceFromMainWei || priceFromHistoryWei || "0";
          if (priceFromMainWei) {
            console.log(`üí∞ L·∫•y gi√° t·ª´ salesInfo: ${priceFromMainWei}`);
          } else if (priceFromHistoryWei) {
            console.log(`üí∞ L·∫•y gi√° t·ª´ trade history: ${priceFromHistoryWei}`);
          }

          const priceNeso = Number(priceWei) / 1e18;

          summaryEntry.items.push({
            itemTokenId: itemToken,
            itemLink: itemUrl,
            priceWei,
            priceNeso,
          });

          if (priceNeso > 0) {
            pricedItems.push({ itemToken, itemUrl, priceNeso });
          }

          itemDetails.push(itemJsonMain || itemJsonTradeHistory);
        } else {
          console.log(`‚ùå B·ªè qua item ${itemToken} sau 3 l·∫ßn l·ªói`);
        }
      }

      // Send a single consolidated Telegram message per character
      if (pricedItems.length > 0) {
        const itemsLines = pricedItems
          .map((it) => `‚Ä¢ [${it.itemToken}](${it.itemUrl}) ‚Äî ${it.priceNeso} Neso`)
          .join("\n");
        const msg = `üí∞ *T√¨m th·∫•y v·∫≠t ph·∫©m c√≥ gi√°!*\nüë§ Nh√¢n v·∫≠t: [${tokenId}](${detailUrl})\nüíµ Gi√° nh√¢n v·∫≠t: ${summaryEntry.characterPriceNeso} Neso\n\n${itemsLines}`;
        sendTelegramMessage(msg);
      }

      return {
        detailJson,
        summaryEntry,
        itemDetails,
        tokenId,
        index
      };
    } catch (err) {
      console.log(
        `‚ùå L·ªói khi x·ª≠ l√Ω v·∫≠t ph·∫©m c·ªßa nh√¢n v·∫≠t ${tokenId}: ${err.message}`
      );
      return {
        detailJson,
        summaryEntry,
        itemDetails: [],
        tokenId,
        index
      };
    }
  };

  // === CH·∫†Y TU·∫¶N T·ª∞ 20 NH√ÇN V·∫¨T ƒê·∫¶U ===
  console.log(`üöÄ B·∫Øt ƒë·∫ßu crawl tu·∫ßn t·ª± ${charactersToCrawl.length} nh√¢n v·∫≠t...`);

  for (let i = 0; i < charactersToCrawl.length; i++) {
    const char = charactersToCrawl[i];

    console.log(`‚è≥ Delay ${REQUEST_DELAY / 1000}s tr∆∞·ªõc khi crawl nh√¢n v·∫≠t ${i + 1}...`);
    await delay(REQUEST_DELAY);

    const result = await crawlCharacter(char, i);
    if (result) {
      console.log(`‚úÖ Ho√†n th√†nh nh√¢n v·∫≠t ${i + 1}/${charactersToCrawl.length}`);
    } else {
      console.log(`‚ùå Th·∫•t b·∫°i nh√¢n v·∫≠t ${i + 1}/${charactersToCrawl.length}`);
    }

    // Delay th√™m sau m·ªói nh√¢n v·∫≠t
    if (i < charactersToCrawl.length - 1) {
      console.log(`‚è≥ Delay th√™m 3s gi·ªØa c√°c nh√¢n v·∫≠t...`);
      await delay(3000);
    }
  }

  console.log(`üéâ Ho√†n th√†nh v√≤ng l·∫∑p ${loopCounter}!`);
  console.log(`üìä ƒê√£ crawl ${charactersToCrawl.length} nh√¢n v·∫≠t`);
  
  await browser.close();
  
  console.log(`‚è≥ Ch·ªù ${LOOP_DELAY / 1000}s tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ti·∫øp theo...`);
  await delay(LOOP_DELAY);
  }
})();

const TELEGRAM_BOT_TOKEN = "8069462425:AAF_U3Yo-plaL7KZVeQmNAfxHxhFk3UQS0k"; // üîë thay b·∫±ng token bot
const TELEGRAM_CHAT_ID = "-4938863590"; // üí¨ id chat ho·∫∑c group

async function sendTelegramMessage(text) {
  const fetch = (await import("node-fetch")).default;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  try {
    await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text,
        parse_mode: "Markdown",
      }),
    });
  } catch (err) {
    console.log("‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c Telegram:", err.message);
  }
}